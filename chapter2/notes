## ELF binary - four parts
1. Executable header
2. program header
3. sections
4. section headers

## file path for elf header
/usr/include/ elf.h

## e_ident array
16 bytes

0x7f, E, L, F --> magic bytes
4 --> EI_CLASS --> set to ELFCLASS32 = 1 early for 32 bit now set to ELFCLASS64 = 2 for 64 bit
5 --> EI_DATA --> set to ELFDATA2LSB(1) = little endian and if set to ELFDATA2MSB(2)  = big endian
6 --> version of ELF, set to EV_CURRENT = 1
7 --> EI_OSABI =>  information regarding Application Binary Interface(ABI) and OS 
                   if non-zero, some OS-specific/ABI specific extensions used in ELF,
                   change in meanining of fields, some nonstd. headers,
                   if 0  -> UNIX V abi
8 --> EI_ABIVERSION => ABI version
9---15 --> EL_PAD

## examining the binary header
readelf -h a.out

## e_type, e_machine, e_version
1. e_type:
    type of ELF binary
    common val: ET_REL(relocatable object file), ET_EXEC(an executable binary), ET_DYN(shared object file)
2. e_machine
    type of arch. binary intended to run on
    common val: EM_X86_64, EM_386(32 bit bin), EM_ARM(ARM bin)
3. e_version
  same as EI_VERSION in ei_ident array.. set to EV_CURRENT

## e_entry-> entry point of bin, interpreter will transfer control over here

## e_phoff, e_shoff fields
e_phoff -> offset to program headers table
e_shoff -> offset to section headers table
if 0, means no header

## e_flags
flags specific to arch.
generally set to 0 for intel x86_64

## e_ehsize: ELF header size = 64 bytes for 64 bit while = 52byte for 32 bit

## e_*entsize and e_*num :

Linker and loader need size of program/section headers + number of such headers
e_phentsize and e_phnum -> size and number of headers for program headers table
e_shentsize and e_shnum -> size and number of headers for section headers table

## e_shstrdx 
Index in section header table for .shstrtab (strings table)

Examining the .shstrtab using readelf
readelf -x .shstrtab build/a.out

## section headers

section - link time
segments - run time
optional in ELF
location: /usr/include/elf.h

1. sh_name : index into .shstrtab defines name of section, if 0 then no name

## sh_type:
Each section's type. 
Info to linker about structure of sections content
SHT_PROGBITS -> machine instructions and constants. Nothing for linker to parse. 
SHT_SYMTAB -> static symbol table
SHT_DYNSYM -> dynamic symbol table
SHT_STRTAB -> string tables
SHT_REL / SHT_RELA -> useful for linker(static linking)
SHT_DYNAMIC -> useful for linker(dynamic linking)

Content: struct name
Symbol : Elf64_Sym
linker info: Elf64_Rel and Elf64_Rela
linker info(Dynamic): Elf64_Dyn

## sh_flags field
sections flags
most imp flags : SH_WRITE, SH_ALLOC, SH_EXECINSTR
SHF_WRITE: section is wriable(variables)
SHF_ALLOC : section content to be loaded in Virt Mem. while run time
SHF_EXEC : section is executable

## sh_addr, sh_offset, sh_size
1. sh_addr : virtual address of section
2. sh_offset: offset to section from start of file
3. sh_size : size of the section

##  sh_link:
relationship among sections. index(in the SH table) of related section

## sh_info: 
additional info for section. Example for relocation section it is index of section for which reloactions needs to be applied

## sh_addralign
if this section need addr alignment..

## sh_entsize
Some header entries present in section header table, print size of those entries

## Sections

##To view the sections in ELF

readelf --sections --wide build/a.out

First section in ELF
SHT_NULL -> section header with no section present

## .init and .fini section
.init -> executable section, executes program before main function starts
.fini -> executable section, executes program after main function finished

## .text section

most of code/ Area of focus for binary analysis and rev engg
Executable but not writable
Contains some of the functions that perform initialization and finalization
_start, register_tm_clones and frame_dummy

main focus: _start --> _libc_start_main --> main

e_entry of ELF HEADER = virtual address for _start

## .bss, .data and .rodata section

.text is not writable, so variables are stored in other sections to keep binary neat
.data ->  default value of initialized vars.. writable
.rodata -> constants and not writable
.bss -> 'block started by symbol' contains uninitialized data

.data and .rodata -> marked as SHT_PROGBITS
.bss -> marked as SHT_NOBITS "doesn't  occupy any bits in binary as it exists on disk". This is just a directive to say allocate this much block of memory for uninitialized data durting ELF execution. vars initialized to zero, writable

## Lazy binding and .plt, .got, .plt.got section

dynamic linker -> last minute relocations
resolution is done only when first reference to unresolved symbol is made.. lazy binding

## Lazy binding and .plt section
Default behaviour of linker -> Resolve the reference only when refered.. lazy binding
You can change this behavior using env variable = LD_BIND_NOW, which will resolve all link ref when ELF is loaded for execution.
Two section: plt(procedure linkage table) and got(global offset table).
ELF has special section called as .got.plt, which uses .got in conjuction with .plt for lazy binding

Diff -> .got.plt is runtime writable, .got is not
RELRO -> relocations readonly, protection againsts overwriting .got..
to enable this protection, use ld option -z relro

RELRO->places the entries that are runtime writable into the .got.plt section and others in .got section

.plt -> code section
.got.plt -> data section

.plt -> stubs of well defined structure.. which directs from .text to appropriate library call

## disassembling .plt section

objdump -d -M intel --section .plt a.out

##plt stub structure
1. default stub
2. series of stub per library function
3. with each stub, value which is pushed onto stack is incremented(identifier).
      Example PUSH 0x0 then PUSH 0x1
## Why we need to GOT?
1. to keep .text non writable, as attacker can inject arbitrary code.
## .rel* or .rela* sections
Type : SHT_RELA -> relocation info(used by linker) like where, how to do relocation

##Getting the relocation info from binary:
readelf --relocs build/a.out

Two types of relocation:
1. R_X86_64_GLOB_DAT ==> relocation done via global offset table(direct address available)
2. R_X86_64_JUMP_SLO ==> relocation  via jump slot (.plt then .got tramploin)

## dynamic section
1. road map to operating system and dynamic linker to load and setup ELF binary for execution.
2. Elf64_Dyn data structure

## get dynamic section of .elf
readelf --dynamic build/a.out

DT_NEEDED -> inform dynamic linker about dependancies needed.
DT_VERNEED -> starting address of version dependancy table.
DT_VERNEEDNUM -> number of entries in version dependancy table.

## .init_array and .fini_array
1. .init_array -> array of function pointers that can be used as constructor
you can have as many function in the .init_array section
mark the function with __attribute__((constructor))

## init array section
objdump -d --section .init_array build/a.out 

## program headers
See all the segments in program section

readelf --wide --segments build/a.out

## p_type field
1. type of program header
2. PT_LOAD -> segment to be loaded into memory.. start address and size mentioned  in the header. 
              atleast two  LOAD segment..one for nonwritable and one for writable
3. PT_DYNAMIC -> dynamic info
4. PT_INTERP -> contains .interp section => dynamic linker name
5. PT_PHDR -> program header table

## p_flag
runtime access info for a segments
PF_X -> executable(code segment)
PF_W -> writable(only for data not for code)
PF_R -> readable (both data and code)

## p_offset, p_vaddr, p_paddr, p_filesz and p_memsz:

p_offset == sh_offset
p_vaddr == sh_addr
p_filesz == sh_size

p_vaddr = p_offset % page_size(normally 4096 B)
sometimes, possible mention of p_paddr -> physical address of segment
in modern system linux dont use this field, so p_paddr = 0

p_filesz -> size of elf, no relocation of .bss
p_memsz -> size of elf, with .bss relocated

p_memsz >= p_filesz



